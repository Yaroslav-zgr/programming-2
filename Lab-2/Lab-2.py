# Определяем функцию для проверки, находится ли клетка под угрозой
def is_under_attack(board, row, col):
    # Проверяем горизонтальные и вертикальные линии
    for i in range(len(board)):  # Проходим по каждой строке/столбцу доски
        if board[row][i] == '#' or board[i][col] == '#':  # Если в текущей строке или столбце есть фигура
            return True  # Возвращаем True, клетка под угрозой
    # Проверяем диагонали
    for i in range(len(board)):  # Проходим по каждой строке доски
        for j in range(len(board)):  # Проходим по каждому столбцу доски
            if (i+j == row+col) or (i-j == row-col):  # Если клетка находится на одной из диагоналей от текущей клетки
                if board[i][j] == '#':  # Если в этой клетке есть фигура
                    return True  # Возвращаем True, клетка под угрозой
    return False  # Если ни одна из проверок не вернула True, возвращаем False, клетка не под угрозой

# Определяем функцию для размещения фигур на доске
def place_figures(board, col, L):
    # Если все фигуры размещены, возвращаем True
    if L == 0:
        return True  # Все фигуры успешно размещены
    # Проверяем каждую строку в текущем столбце
    for i in range(len(board)):  # Проходим по каждой строке доски
        if not is_under_attack(board, i, col):  # Если текущая клетка не под угрозой
            # Размещаем фигуру на доске
            board[i][col] = '#'  # Помещаем фигуру в текущую клетку
            # Продолжаем размещать фигуры в следующем столбце
            if place_figures(board, col+1, L-1):  # Если удалось разместить оставшиеся фигуры
                return True  # Возвращаем True, все фигуры успешно размещены
            # Если размещение фигур в следующем столбце не удалось, убираем фигуру с доски
            board[i][col] = '0'  # Убираем фигуру из текущей клетки
    return False  # Если ни одна из строк не позволила разместить все фигуры, возвращаем False

# Определяем функцию для чтения входных данных
def read_input():
    with open('input.txt', 'r') as file:  # Открываем файл input.txt для чтения
        N, L, K = map(int, file.readline().split())  # Читаем первую строку файла и преобразуем ее в целые числа
        board = [['0' for _ in range(N)] for _ in range(N)]  # Создаем пустую доску размером N x N
        for _ in range(K):  # Для каждой уже размещенной фигуры
            x, y = map(int, file.readline().split())  # Читаем координаты фигуры
            board[x][y] = '#'  # Размещаем фигуру на доске
    return N, L, board  # Возвращаем размер доски, количество фигур для размещения и доску

# Определяем функцию для записи выходных данных
def write_output(board):
    with open('output.txt', 'w') as file:  # Открываем файл output.txt для записи
        for i in range(len(board)):  # Проходим по каждой строке доски
            for j in range(len(board)):  # Проходим по каждому столбцу доски
                if board[i][j] == '#':  # Если в текущей клетке есть фигура
                    file.write(f'({i},{j}) ')  # Записываем координаты фигуры в файл
        file.write('\n')  # Переходим на новую строку в файле

# Определяем функцию для вывода доски на консоль
def print_board(board):
    for row in board:  # Проходим по каждой строке доски
        print(' '.join(row))  # Выводим строку на консоль
    print()  # Переходим на новую строку на консоли

# Читаем входные данные
N, L, board = read_input()

# Размещаем фигуры на доске
if place_figures(board, 0, L):  # Если удалось разместить все фигуры
    # Записываем выходные данные
    write_output(board)  # Записываем координаты фигур в файл
    # Выводим доску на консоль
    print_board(board)  # Выводим доску на консоль
else:  # Если не удалось разместить все фигуры
    # Если решений нет, записываем в файл "no solutions"
    with open('output.txt', 'w') as file:  # Открываем файл output.txt для записи
        file.write('no solutions\n')  # Записываем "no solutions" в файл
